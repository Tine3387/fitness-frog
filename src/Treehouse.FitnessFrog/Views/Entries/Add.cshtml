<!-- We make our view strongly typed by adding a model directive to the top of the View. -->
<!-- By making our view strongly typed, -->
<!-- the entry model instance that is being passed into the controllers call to -->
<!-- the view method will now be available via the views model property. -->
<!-- We can also update our label, text box and text area HTML helper methods to their strongly typed versions. -->
@model Treehouse.FitnessFrog.Models.Entry
<!-- We can replace our strings with the corresponding enum values -->
@using Treehouse.FitnessFrog.Models

@{
    ViewBag.Title = "Add Entry";
}

<!-- Press ctrl + k, ctrl + c to uncomment the whole section -->
@*<select>
    <option value="1">Item 1</option>
    <option value="2" selected>Item 2</option>
</select>*@

<h2>@ViewBag.Title</h2>

<!-- Typically the using statement is used with unmanage ressources, -->
<!-- to ensure that they are properly released and cleaned up. -->
<!-- Used in this context, -->
<!-- the using statement is being used to ensure -->
<!-- that the closing form element is rendered after all of the form's content is rendered. -->
@using (Html.BeginForm())
{
    <!-- All of our error messages are displayed on the top of the page -->
    @Html.ValidationSummary("The following errors were found:", new { @class = "alert alert-danger" })

    <div class="row">

        <div class="col-md-6">

            <div class="form-group">
                <!-- Changed to LabelFor and replace our date string with a lambda(=>) expression. -->
                <!-- You can think of a => expression as an anonymous method. -->
                <!-- m here is a method parameter that is a reference to our views model property. -->
                <!-- => operator is the transition from the parameter list to the method body. -->
                <!-- m.Date is the property on our model that we're returning from our anonymous method. -->
                <!-- This approach gives us a strongly typed way -->
                <!-- to specify the model property that we want to render a label for -->
                @Html.LabelFor(m => m.Date, new { @class = "control-label" })
                @Html.TextBoxFor(m => m.Date, "{0:d}", new { @class = "form-control datepicker" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.ActivityId, new { @class = "control-label" })
                @Html.DropDownListFor(m => m.ActivityId, 
                        (SelectList)ViewBag.ActivitiesSelectListItems, "", new { @class = "form-control" })
                <!-- Our error message is displayed down at the field level -->
                <!-- We shouldn't use field level messages by itself as it's possible to not be associated with a field -->
                <!-- So we need the summary section to display those global messages -->
                @*@Html.ValidationMessageFor(m => m.ActivityId)*@
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Duration, new { @class = "control-label" })
                @Html.TextBoxFor(m => m.Duration, new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Intensity, new { @class = "control-label" })
                <div>
                    <!-- radio-inline makes the text clickable as well as the radiobutton -->
                    <label class="radio-inline">
                        @Html.RadioButtonFor(m => m.Intensity,
                            Entry.IntensityLevel.Low) @Entry.IntensityLevel.Low
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(m => m.Intensity,
                            Entry.IntensityLevel.Medium) @Entry.IntensityLevel.Medium
                    </label>
                    <label class="radio-inline">
                        @Html.RadioButtonFor(m => m.Intensity,
                            Entry.IntensityLevel.High) @Entry.IntensityLevel.High
                    </label>
                </div>
            </div>

            <div class="form-group">
                <!-- div class="checkbox" makes the text clickable as well as the checkbox -->
                <div class="checkbox">
                    <label>
                        @Html.CheckBoxFor(m => m.Exclude) @Html.DisplayNameFor(m => m.Exclude)
                    </label>
                </div>
            </div>

        </div>

        <div class="col-md-6">

            <div class="form-group">
                @Html.LabelFor(m => m.Notes, new { @class = "control-label" })
                @Html.TextAreaFor(m => m.Notes, 14, 20, new { @class = "form-control" })
            </div>

        </div>

        <div class="col-md-12">
            <div class="pad-top">
                <button type="submit" class="btn btn-success btn-lg margin-right">
                    <span class="glyphicon glyphicon-save"></span> Save
                </button>
                <a href="@Url.Action("Index")" class="btn btn-warning btn-lg">
                    <span class="glyphicon glyphicon-remove"></span> Cancel
                </a>
            </div>
        </div>

    </div>
}
